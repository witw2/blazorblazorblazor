@page "/data-table"
@inject HttpClient Http
@inject ILogger<DataTable> Logger
@inject NavigationManager Navigation
@using MyBlazorApp.Models
@using System.Text.Json

<h3 class="text-center my-4">Elements</h3>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <input @bind="filter" class="form-control" placeholder="Filter..." />
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="LoadData">Load Data</button>
        </div>
        <div class="col-auto">
            <select @bind="sortBy" @bind:event="onchange" @onclick="LoadData" class="form-select">
                <option value="Title">Title</option>
                <option value="Description">Description</option>
                <option value="Created">Created</option>
            </select>
        </div>
        <div class="col-auto">
            <select @bind="sortAscending" @bind:event="onchange" @onclick="LoadData" class="form-select">
                <option value="true">Ascending</option>
                <option value="false">Descending</option>
            </select>
        </div>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanPreviousPage)">Previous</button>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNextPage)">Next</button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th class="sortable">Title</th>
                <th>Description</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.Description</td>
                    <td>@item.Created</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditItem(item.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mb-3">
        <p>Showing @itemCount/10 elements per page</p>
    </div>
</div>

@code {
    private List<DataItem> data = new();
    private string filter = "";
    private int pageNumber = 1;
    private int pageSize = 10;
    private string sortColumn = nameof(DataItem.Title);
    private string sortAscending = "true";
    private bool hasNext = false;
    private bool hasPrevious = false;
    private string sortBy = "Title";
    private int itemCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Logger.LogInformation("Loading data...");
            var response = await Http.GetAsync($"http://localhost:5019/todo?page={pageNumber}&filter={filter}&sortAsc={sortAscending}&sortBy={sortBy}");
            response.EnsureSuccessStatusCode();
            var responseData = await response.Content.ReadFromJsonAsync<TodoResponse>();
            if (responseData != null)
            {
                data = responseData.TodoTitles;
                pageNumber = responseData.Page;
                pageSize = responseData.PageSize;
                hasNext = responseData.HasNext;
                hasPrevious = responseData.HasPrevious;
                itemCount = data.Count; // Aktualizacja licznika elementów
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError($"HTTP error loading data: {httpEx.Message}");
        }
        catch (NotSupportedException nsEx)
        {
            Logger.LogError($"The content type is not supported: {nsEx.Message}");
        }
        catch (JsonException jsonEx)
        {
            Logger.LogError($"Error deserializing JSON: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error loading data: {ex.Message}");
        }
    }

    private void EditItem(int id)
    {
        Navigation.NavigateTo($"/edit-data-item/{id}");
    }

    private async Task DeleteItem(int id)
    {
        try
        {
            Logger.LogInformation($"Deleting item with ID {id}...");
            var response = await Http.DeleteAsync($"http://localhost:5019/todo?id={id}");
            response.EnsureSuccessStatusCode();
            await LoadData();
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError($"HTTP error deleting data: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error deleting data: {ex.Message}");
        }
    }

    private bool CanPreviousPage => hasPrevious;
    private bool CanNextPage => hasNext;

    private async Task PreviousPage()
    {
        if (CanPreviousPage)
        {
            pageNumber--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (CanNextPage)
        {
            pageNumber++;
            await LoadData();
        }
    }

    private async Task SortByChanged(ChangeEventArgs e)
    {
        sortBy = e.Value.ToString();
        await LoadData();
    }

    private async Task SortOrderChanged(ChangeEventArgs e)
    {
        sortAscending = e.Value.ToString();
        await LoadData();
    }
}